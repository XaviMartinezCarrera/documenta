---
title: "Back End"
---

|
|

![](imagenes/java.png){width=25%}

Lenguaje orientado a objetos     |     Servidor


* Java es un lenguaje de programación ampliamente utilizado para codificar aplicaciones web.

* Ha sido una opción popular entre los desarrolladores durante más de dos décadas, con millones de aplicaciones Java en uso en la actualidad.

* Java es un lenguaje multiplataforma, orientado a objetos y centrado en la red que se puede utilizar como una plataforma en sí mismo.

* Es un lenguaje de programación rápido, seguro y confiable para codificarlo todo, desde aplicaciones móviles y software empresarial hasta aplicaciones de macrodatos y tecnologías del servidor.

* En Java tenemos 3 lógicas: programa, usuario y base de datos (SQL).

* Clases:
    + Funcionales: managers y controllers (son métodos estáticos).
    + Entidades: modelos y hashmaps (son métodos no estáticos).

* Métodos:
    + No estáticos: necesitamos un objeto para ejecutarlos.
    + Estáticos: no necesitamos un objeto para ejecutarlos.

* Estructura básica de una clase de Java:

```java
public class MiClase {
    // Campos (variables)
    private int miCampoEntero;
    private String miCampoString;

    // Constructor
    public MiClase(int miCampoEntero, String miCampoString) {
        this.miCampoEntero = miCampoEntero;
        this.miCampoString = miCampoString;
    }

    // Métodos
    public void metodo1() {
        // Implementación del método 1
    }

    public int metodo2() {
        // Implementación del método 2
        return 0;
    }

    // Otros métodos y/o miembros de la clase
}
```


|
|


| Software Core Tools | Development Tools | Developer Tools | DevOps & App Lifecycle |
|------|------|------|------|
| Java SE    | Maven    | IntelliJIdea    | Sandbox |
| JDK 21    | Pom.xml    | IntelliJIdea Debugger    | Agile / SCRUM |
| Open JDK    | Lombok    | Git / GitHub    | Linux 21.3 |
| Spring Boot    | JUnit    | Mermaid (UML)    |  |
|     | Java Faker    | Documentation (Quarto)     |  |

----------------------------

|
|

![](imagenes/springboot.png){width=40%}

Framework     |     Inyección de dependencia

|
|

* **Java Spring Boot** (Spring Boot) es una herramienta que acelera y simplifica el desarrollo de microservicios y aplicaciones web con Spring Framework.

|
|

* **Funciones principales**:
    + Configuración automática.
    + Enfoque de configuración obstinado.
    + Capacidad de crear aplicaciones autónomas.

|
|

* Para comenzar un **poyecto**:

    start.spring.io

|
|

* Utiliza **anotaciones**:
    + (@)Autowired.
    + (@)RequestMapping.
    + (@)Controller.
    + (@)RestControlle

|
|

* **Proceso**:
    1. Petición HTTP ---> (@)RestController.
    2. (@)RestController ---> (@)Service.
    3. (@)Service devuelve un array a (@)RestController.
    4. Array convertido en JSON.
    5. Publica la URL.

|
|

* **Ejemplo** de proyecto inicial Spring Boot:

```java
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HolaControlador {

    @GetMapping("/hola")
    public String hola() {
        return "¡Hola, mundo!";
    }
}
```

|
|

* **Thymeleaf**:
    + Instalar dependencia de Thymeleaf.
    + Permite insertar código Java en HTML.
    + Permite crear plantillas.
    + Se puede crear un Front con Thymeleaf y CSS.

```java
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Proyecto Thymeleaf</title>
</head>
<body>
    <h1>Bienvenido a mi aplicación con Thymeleaf</h1>
    <p>Este es un ejemplo básico de uso de Thymeleaf en Spring Boot.</p>
    <p>La fecha y hora actual es: <span th:text="${#dates.format(#dates.now(), 'dd/MM/yyyy HH:mm:ss')}"></span></p>
</body>
</html>
```

|
|

* **Funciones** de las anotaciones:

    + **(@)RestController** (ORDENA)
        1. Gestiona el ciclo Request-Response.
        2. Operaciones CRUD.
        3. Devolverá un JSON.
    + **(@)Controller**
        1. Renderiza webs (Thymeleaf).
        2. SSR (Service Side Rendering).
        3. Devolverá un JSON.
    + **(@)Sercvice** (TRABAJA)
        1. Hace el trabajo real.
        2. Implementa business logic.
        3. Trabaja para el (@)RestController.
    + **(@)Repository** (GUARDA)
        1. Busca los datos en la DB.
        2. Le pasa los datos a (@)Service.

|
|

* **Postman**:

    + Web para crear APIs.
    + Permite hacer peticiones al server.
    + Se pone la URL del Spring Boot.
    + Se elige la petición en el desplegable.
    + Clicar 'Send'.
    + Hay que configurarlo (Query Params).


----------------------

|
|


