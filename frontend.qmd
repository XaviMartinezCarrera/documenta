---
title: "Front End"
---


|
|



![](imagenes/quarto.png){width=25%}

Markdown      |      Documentación

* Quarto es un entorno de trabajo que facilita estructurar un documento que reúna las salidas, tanto gráficas como de texto, junto con el código que las genera. Este entorno se basa en el lenguaje markdown.

* Quarto coge un md (texto plano) y lo transforma en HTML para publicarlo.

* Proceso de publicación: md -- (Pandoc) -- html -- (Git) -- GitHub -- (GitHubPages) -- Publicación

----------------------

|
|



![](imagenes/html.png){width=20%}

Lenguaje de marcas      |   Esqueleto de la web   

* HTML, acrónimo en inglés de HyperText Markup Language, hace referencia al lenguaje de marcado utilizado en la creación de páginas web. Este estándar que sirve de referencia del software que interactúa con la elaboración de páginas web en sus diferentes versiones.   

----------------------

|
|



![](imagenes/css.png){width=15%}

Estilos     |     Colores

* CSS, en español «Hojas de estilo en cascada», es un lenguaje de diseño gráfico para definir y crear la presentación de un documento estructurado escrito en un lenguaje de marcado.

* Selectores básicos:
    + De tipo.
    + De clase.
    + De id,
    + De atributo.
    + Universales.

* Combinadores: 
    + De hermanos adyacentes.
    + General de hermanos.
    + De hijo.
    + Descendientes.
    + De column.
    
* Pseudoclases.

* Pseudoelementos.

* W3-CSS, Bootstrap, SASS, Semantic, Material, Tailwind.

----------------------

|
|



![](imagenes/javascript.png){width=20%}

Interactividad

* JavaScript es un lenguaje de programación interpretado, dialecto del estándar ECMAScript. Se define como orientado a objetos, ​ basado en prototipos, imperativo, débilmente tipado y dinámico.

* JavaScript moderno: ECMA ES6.

----------------------

|
|



![](imagenes/react.jpg){width=25%}

Librería de Javascript   |   Interfaces de usuario

|
|

* **React** es una biblioteca Javascript de código abierto diseñada para crear interfaces de usuario con el objetivo de facilitar el desarrollo de aplicaciones en una sola página. Es mantenido por Facebook y la comunidad de software libre. En el proyecto hay más de mil desarrolladores libres.

|
|

* **Principales características**:
    + SPA (Single Page Application)
    + Lenguaje orientado a componentes.
    + Componentes puros.
    + Ciclo de Render.
    + Trigger.
    + Virtual DOM (Document Object Model).
    + JSX: mezcla entre HTML y JavaScript.
    + Estados.
    + Props.
    + Routing.
    + Hooks.

|
|

* **Crear** un Proyecto React: 

```javascript
npx create-react-app my-app
```

|
|

* **Iniciar** un Proyecto React: 

```javascript
npm start
```

|
|

* **Estructura** de un Proyecto React (Dominios):
    + Assets.
    + Layouts.
    + Components.
    + Pages.
    + Middleware.
    + Routes.
    + Config.
    + Services.
    + Utils.

|
|

* **React Cycle**:

Trigger Phase (User clicks) --- Render Phase (Calls component) --- Commit Phase (Modifies the DOM)

|
|

* Estructura básica de un **Componente React**:

```javascript
import React from 'react';

function MiComponente(props) {
  // Lógica de negocio

  return (
    <>
      {/* Contenido JSX que representa el componente */}
    </>
  );
}

export default MiComponente;
```
|
|

* **Spread Operator**:
    + Se usa para no tener que copiar cada propiedad por separado.

```javascript
set person ({
  ...person, (copy the old fields)
  firstName: e.target.value (but override this one)
});
```
|
|

* **Hooks**:
    + **useState**: función que crea internamente una variable donde podremos almacenar el estado de nuetro componente.

    + **useEffect**: se encarga de operaciones colaterales. Ej: conectarse por detrás a un backend.
      1. Se ejecuta para cada render (Sync All Data).
      2. Sincroniza con State & Props.
      3. Sincroniza con No Data.

    + **useMemo**: permite guardar en caché el resultado de un cálculo entre renderizados.

    + **useContext**: permite compartir información entre componentes de manera fácil y sencilla.
      1. Crear > Create.
      2. Importar / Exportar > Provider.
      3. Inyectar > Wrapper.
      4. Utilizar > useContext.
      
----------------------

|
|



